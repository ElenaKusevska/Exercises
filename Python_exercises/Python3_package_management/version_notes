But, when multiple versions of the same package exist, what happens
when that package is imported? Taking, numpy as example:

Currently the PATH variable is defined as:
---------------------------------------------------------------------
[...otes/Python3_package_management]python3
Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
[GCC 8.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys
>>> print(sys.path)
['', '/usr/lib/python36.zip', '/usr/lib/python3.6', '/usr/lib/python3.6/lib-dynload', '/home/elena/.local/lib/python3.6/site-packages', '/usr/local/lib/python3.6/dist-packages', '/usr/lib/python3/dist-packages']

And there is a version of numpy in the following two locations
on the PATH:

home/elena/.local/lib/python3.6/site-packages/numpy
(i.e. sys.path[4]/numpy)
(version 1.19.0)

and

/usr/lib/python3/dist-packages/numpy
(i.e. sys.path[5]/numpy)
(version 1.13.3)

If you look at the output of version_test.py, you will see that python
searched sys.path in order, found numpy at location sys.path[4],
and used that version of numpy, because it most likely stopped searching
once it found the package.

Below are the version files:

#---------------------------------------------------------------------
# /home/elena/.local/lib/python3.6/site-packages/numpy/version.py
#---------------------------------------------------------------------
# THIS FILE IS GENERATED FROM NUMPY SETUP.PY
#
# To compare versions robustly, use `numpy.lib.NumpyVersion`
short_version = '1.19.0'
version = '1.19.0'
full_version = '1.19.0'
git_revision = '92ebe1e9a6aeb47a881a1226b08218175776f9ea'
release = True

if not release:
    version = full_version

#---------------------------------------------------------------------
# /usr/lib/python3/dist-packages/numpy/version.py
#---------------------------------------------------------------------
# THIS FILE IS GENERATED FROM NUMPY SETUP.PY
#
# To compare versions robustly, use `numpy.lib.NumpyVersion`
short_version = '1.13.3'
version = '1.13.3'
full_version = '1.13.3'
git_revision = '31465473c491829d636c9104c390062cba005681'
release = True

if not release:
    version = full_version
